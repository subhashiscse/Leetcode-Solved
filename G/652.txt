/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> vec;
    unordered_map<string,int>mp;
    string  dfsPath(TreeNode* root){
        if(!root) 
            return "$";
        string fstStr=dfsPath(root->left);
        string scndStr=dfsPath(root->right);
        string temp=to_string(root->val)+"-"+fstStr+"-"+scndStr;
        mp[temp]++;
        if(mp[temp]==2)
            vec.push_back(root);
        return temp;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        dfsPath(root);
        return vec;
    }
};

/*
TC: O(n);
SC: O(n);
*/