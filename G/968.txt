/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int camera = 0;
    int dfs(TreeNode* root){
        // 1 means must install camera on this node
        // 2 means not necessary to install camera on this node
        // 3 means child node already covered by camera 
        if(root==NULL){
            return 2;
        }
        int lft=dfs(root->left);
        int rght=dfs(root->right);
        if(lft == 1 || rght ==1){     /// current node need to install camera
            camera++;                 /// set up camera 
            return 3;                 /// return parent node that child node is covered 
        } 
        if(lft == 3 || rght == 3){    /// If any one says previous have camera installed
            return 2;                 /// not necessary to install
        } 
        if(lft == 2 || rght == 2){     /// not necessary to setup camera
            return 1;                  /// return that child node not covered to need to setup
        }
        return 0;
    }
    int minCameraCover(TreeNode* root) {
        if(dfs(root)==1){
            camera++;
        }
        return camera;
    }
};

/*
TC:O(n)
SC:O(1)
*/