class Solution {
public:
    vector<int> getOrder(vector<vector<int>>& tasks) {
        int sz=tasks.size();
        for(int i=0;i<sz;i++){
            tasks[i].push_back(i);
        }
        sort(tasks.begin(),tasks.end());
        long long time=tasks[0][0];
        int pos=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        while(pos<sz && tasks[pos][0]<=time){
            pq.push({tasks[pos][1],tasks[pos][2]});
            pos++;
        }
        vector<int>ans;
        while(!pq.empty()){
            pair<int,int>task=pq.top();
            pq.pop();
            time+=task.first;
            ans.push_back(task.second);
            if(pq.empty()){
                if(pos<sz){
                    time=max(time,(long long)tasks[pos][0]);
                }
            }
            while(pos<sz && tasks[pos][0]<=time){
                pq.push({tasks[pos][1],tasks[pos][2]});
                pos++;
            }
        }
        return ans;
    }
};

/*
TC: O(nlogn)
SC: O(n)
*/